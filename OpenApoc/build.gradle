import java.security.MessageDigest

def signing = [
        enabled      : false,
        storeFilePath: '.keystore',
        storePassword: 'password',
        keyAlias     : 'alias',
        keyPassword  : 'password'
]

apply plugin: 'com.android.model.application'

if (file('signing.properties').exists()) {
    Properties properties = new Properties()
    properties.load(file("signing.properties").newDataInputStream())
    signing.enabled = properties.getProperty("signing.enabled")
    signing.storeFilePath = properties.getProperty("signing.storeFilePath")
    signing.storePassword = properties.getProperty("signing.storePassword")
    signing.keyAlias = properties.getProperty("signing.keyAlias")
    signing.keyPassword = properties.getProperty("signing.keyPassword")
    println("Signing configuration loaded")
}

def buildAbisEnv = System.getenv()['BUILD_ARCH_LIST']

def buildAbis = new ArrayList<String>()

if (!buildAbisEnv) {
    buildAbis.addAll(['mips', 'armeabi-v7a','x86', 'x86_64', 'arm64-v8a', /*'mips64'*/])
} else {
    buildAbis.addAll(buildAbisEnv.split(" "))
}

def getFolder(res) {
    return file("src/main/jni/OpenApoc/${res}")
}

tasks.withType(Zip) {
    zTask ->
        zTask.doLast {
            MessageDigest digest = MessageDigest.getInstance("MD5")
            digest.update(file(zTask.archivePath).bytes)
            def checksum = new BigInteger(1, digest.digest()).toString(16).padLeft(32, "0")
            new File(zTask.archivePath.toString() + ".md5").text = checksum
        }
}

task packData(description: 'Update data files.') {
    ['data'].each { String res ->
        def zip = task("zip" + res, type: Zip)
        zip.doFirst { println("Packing ${res}...") }
        zip.destinationDir = file('src/main/assets')
        zip.archiveName = "${res}.zip"
        zip.from getFolder(res)
        zip.into res
        zip.execute()
    }
}

build.dependsOn packData

model {

    def signingConf

    android {
        compileSdkVersion = 22
        buildToolsVersion = "22.0.1"

        defaultConfig.with {
            applicationId = "org.sfalexrog.openapoc"
            minSdkVersion.apiLevel = 15
            targetSdkVersion.apiLevel = 22
            versionCode = 1
            versionName = "1.0"
        }
    }

    android.lintOptions {
        abortOnError = false
    }

    android.ndk {
        moduleName = "openapoc"
        toolchain = "gcc"
        stl = 'gnustl_static'
        //platformVersion = 19
        abiFilters.addAll(buildAbis)
        // sdl includes
        CFlags.add("-I${file("src/main/jni/SDL/include")}".toString())
        cppFlags.add("-I${file("src/main/jni/SDL/include")}".toString())
        // sdl-image includes
        CFlags.add("-I${file("src/main/jni/SDL_image")}".toString())
        cppFlags.add("-I${file("src/main/jni/SDL_image")}".toString())
        // sdl-mixer includes
        CFlags.add("-I${file("src/main/jni/SDL_mixer")}".toString())
        cppFlags.add("-I${file("src/main/jni/SDL_mixer")}".toString())
        // physfs includes
        CFlags.add("-I${file("src/main/jni/OpenApoc/dependencies/physfs/src")}".toString())
        cppFlags.add("-I${file("src/main/jni/OpenApoc/dependencies/physfs/src")}".toString())
        // boost::locale includes
        CFlags.add("-I${file("src/main/jni/boost_libs/locale/include")}".toString())
        cppFlags.add("-I${file("src/main/jni/boost_libs/locale/include")}".toString())
        CFlags.add("-I${file("src/main/jni/boost_libs/format/include")}".toString())
        cppFlags.add("-I${file("src/main/jni/boost_libs/format/include")}".toString())
        CFlags.add("-I${file("src/main/jni/boost_libs/detail/include")}".toString())
        cppFlags.add("-I${file("src/main/jni/boost_libs/detail/include")}".toString())
        CFlags.add("-I${file("src/main/jni/boost_libs/config/include")}".toString())
        cppFlags.add("-I${file("src/main/jni/boost_libs/config/include")}".toString())
        CFlags.add("-I${file("src/main/jni/boost_libs/assert/include")}".toString())
        cppFlags.add("-I${file("src/main/jni/boost_libs/assert/include")}".toString())
        CFlags.add("-I${file("src/main/jni/boost_libs/optional/include")}".toString())
        cppFlags.add("-I${file("src/main/jni/boost_libs/optional/include")}".toString())
        CFlags.add("-I${file("src/main/jni/boost_libs/core/include")}".toString())
        cppFlags.add("-I${file("src/main/jni/boost_libs/core/include")}".toString())
        CFlags.add("-I${file("src/main/jni/boost_libs/static_assert/include")}".toString())
        cppFlags.add("-I${file("src/main/jni/boost_libs/static_assert/include")}".toString())
        CFlags.add("-I${file("src/main/jni/boost_libs/type_traits/include")}".toString())
        cppFlags.add("-I${file("src/main/jni/boost_libs/type_traits/include")}".toString())
        CFlags.add("-I${file("src/main/jni/boost_libs/mpl/include")}".toString())
        cppFlags.add("-I${file("src/main/jni/boost_libs/mpl/include")}".toString())
        CFlags.add("-I${file("src/main/jni/boost_libs/move/include")}".toString())
        cppFlags.add("-I${file("src/main/jni/boost_libs/move/include")}".toString())
        CFlags.add("-I${file("src/main/jni/boost_libs/utility/include")}".toString())
        cppFlags.add("-I${file("src/main/jni/boost_libs/utility/include")}".toString())
        CFlags.add("-I${file("src/main/jni/boost_libs/throw_exception/include")}".toString())
        cppFlags.add("-I${file("src/main/jni/boost_libs/throw_exception/include")}".toString())
        CFlags.add("-I${file("src/main/jni/boost_libs/preprocessor/include")}".toString())
        cppFlags.add("-I${file("src/main/jni/boost_libs/preprocessor/include")}".toString())
        CFlags.add("-I${file("src/main/jni/boost_libs/smart_ptr/include")}".toString())
        cppFlags.add("-I${file("src/main/jni/boost_libs/smart_ptr/include")}".toString())
        CFlags.add("-I${file("src/main/jni/boost_libs/predef/include")}".toString())
        cppFlags.add("-I${file("src/main/jni/boost_libs/predef/include")}".toString())
        CFlags.add("-I${file("src/main/jni/boost_libs/iterator/include")}".toString())
        cppFlags.add("-I${file("src/main/jni/boost_libs/iterator/include")}".toString())
        CFlags.add("-I${file("src/main/jni/boost_libs/function/include")}".toString())
        cppFlags.add("-I${file("src/main/jni/boost_libs/function/include")}".toString())
        CFlags.add("-I${file("src/main/jni/boost_libs/integer/include")}".toString())
        cppFlags.add("-I${file("src/main/jni/boost_libs/integer/include")}".toString())
        CFlags.add("-I${file("src/main/jni/boost_libs/type_index/include")}".toString())
        cppFlags.add("-I${file("src/main/jni/boost_libs/type_index/include")}".toString())
        CFlags.add("-I${file("src/main/jni/boost_libs/bind/include")}".toString())
        cppFlags.add("-I${file("src/main/jni/boost_libs/bind/include")}".toString())
        CFlags.add("-I${file("src/main/jni/boost_libs/thread/include")}".toString())
        cppFlags.add("-I${file("src/main/jni/boost_libs/thread/include")}".toString())
        CFlags.add("-I${file("src/main/jni/boost_libs/system/include")}".toString())
        cppFlags.add("-I${file("src/main/jni/boost_libs/system/include")}".toString())
        CFlags.add("-I${file("src/main/jni/boost_libs/date_time/include")}".toString())
        cppFlags.add("-I${file("src/main/jni/boost_libs/date_time/include")}".toString())
        CFlags.add("-I${file("src/main/jni/boost_libs/chrono/include")}".toString())
        cppFlags.add("-I${file("src/main/jni/boost_libs/chrono/include")}".toString())
        CFlags.add("-I${file("src/main/jni/boost_libs/ratio/include")}".toString())
        cppFlags.add("-I${file("src/main/jni/boost_libs/ratio/include")}".toString())
        CFlags.add("-I${file("src/main/jni/boost_libs/lexical_cast/include")}".toString())
        cppFlags.add("-I${file("src/main/jni/boost_libs/lexical_cast/include")}".toString())
        CFlags.add("-I${file("src/main/jni/boost_libs/range/include")}".toString())
        cppFlags.add("-I${file("src/main/jni/boost_libs/range/include")}".toString())
        CFlags.add("-I${file("src/main/jni/boost_libs/concept_check/include")}".toString())
        cppFlags.add("-I${file("src/main/jni/boost_libs/concept_check/include")}".toString())
        CFlags.add("-I${file("src/main/jni/boost_libs/numeric_conversion/include")}".toString())
        cppFlags.add("-I${file("src/main/jni/boost_libs/numeric_conversion/include")}".toString())
        CFlags.add("-I${file("src/main/jni/boost_libs/array/include")}".toString())
        cppFlags.add("-I${file("src/main/jni/boost_libs/array/include")}".toString())
        CFlags.add("-I${file("src/main/jni/boost_libs/container/include")}".toString())
        cppFlags.add("-I${file("src/main/jni/boost_libs/container/include")}".toString())
        CFlags.add("-I${file("src/main/jni/boost_libs/intrusive/include")}".toString())
        cppFlags.add("-I${file("src/main/jni/boost_libs/intrusive/include")}".toString())
        CFlags.add("-I${file("src/main/jni/boost_libs/math/include")}".toString())
        cppFlags.add("-I${file("src/main/jni/boost_libs/math/include")}".toString())
        CFlags.add("-I${file("src/main/jni/boost_libs/io/include")}".toString())
        cppFlags.add("-I${file("src/main/jni/boost_libs/io/include")}".toString())
        CFlags.add("-I${file("src/main/jni/boost_libs/functional/include")}".toString())
        cppFlags.add("-I${file("src/main/jni/boost_libs/functional/include")}".toString())
        CFlags.add("-I${file("src/main/jni/boost_libs/tokenizer/include")}".toString())
        cppFlags.add("-I${file("src/main/jni/boost_libs/tokenizer/include")}".toString())
        CFlags.add("-I${file("src/main/jni/boost_libs/multiprecision/include")}".toString())
        cppFlags.add("-I${file("src/main/jni/boost_libs/multiprecision/include")}".toString())
        CFlags.add("-I${file("src/main/jni/boost_libs/unordered/include")}".toString())
        cppFlags.add("-I${file("src/main/jni/boost_libs/unordered/include")}".toString())
        CFlags.add("-I${file("src/main/jni/boost_libs/atomic/include")}".toString())
        cppFlags.add("-I${file("src/main/jni/boost_libs/atomic/include")}".toString())
        CFlags.add("-I${file("src/main/jni/boost_libs/tuple/include")}".toString())
        cppFlags.add("-I${file("src/main/jni/boost_libs/tuple/include")}".toString())
        CFlags.add("-I${file("src/main/jni/boost_libs/rational/include")}".toString())
        cppFlags.add("-I${file("src/main/jni/boost_libs/rational/include")}".toString())
        CFlags.add("-I${file("src/main/jni/boost_libs/exception/include")}".toString())
        cppFlags.add("-I${file("src/main/jni/boost_libs/exception/include")}".toString())
        CFlags.add("-I${file("src/main/jni/boost_libs/align/include")}".toString())
        cppFlags.add("-I${file("src/main/jni/boost_libs/align/include")}".toString())
        CFlags.add("-I${file("src/main/jni/boost_libs/algorithm/include")}".toString())
        cppFlags.add("-I${file("src/main/jni/boost_libs/algorithm/include")}".toString())
        // icu55 includes
        CFlags.add("-I${file("src/main/jni/icu55/source/common")}".toString())
        cppFlags.add("-I${file("src/main/jni/icu55/source/common")}".toString())
        CFlags.add("-I${file("src/main/jni/icu55/source/i18n")}".toString())
        cppFlags.add("-I${file("src/main/jni/icu55/source/i18n")}".toString())
        // tinyxml includes
        CFlags.add("-I${file("src/main/jni/OpenApoc/dependencies/tinyxml2")}".toString())
        cppFlags.add("-I${file("src/main/jni/OpenApoc/dependencies/tinyxml2")}".toString())
        // glm includes
        CFlags.add("-I${file("src/main/jni/OpenApoc/dependencies/glm")}".toString())
        cppFlags.add("-I${file("src/main/jni/OpenApoc/dependencies/glm")}".toString())
        // openapoc includes
        CFlags.add("-I${file("src/main/jni/OpenApoc")}".toString())
        CFlags.add("-I${file("src/main/jni/openapoc-mkfiles")}".toString())
        cppFlags.add("-I${file("src/main/jni/OpenApoc")}".toString())
        cppFlags.add("-I${file("src/main/jni/openapoc-mkfiles")}".toString())
        // defines
        // sdl
        CFlags.add("-DGL_GLEXT_PROTOTYPES")
        cppFlags.add("-DGL_GLEXT_PROTOTYPES")
        // sdl-image
        CFlags.addAll(["-DLOAD_BMP", "-DLOAD_GIF", "-DLOAD_LBM", "-DLOAD_PCX", "-DLOAD_PNM", "-DLOAD_TGA", "-DLOAD_XCF", "-DLOAD_XPM", "-DLOAD_XV"])
        cppFlags.addAll(["-DLOAD_BMP", "-DLOAD_GIF", "-DLOAD_LBM", "-DLOAD_PCX", "-DLOAD_PNM", "-DLOAD_TGA", "-DLOAD_XCF", "-DLOAD_XPM", "-DLOAD_XV"])
        // icu55
        CFlags.addAll(["-DICU_DATA_DIR_PREFIX_ENV_VAR=\"ANDROID_ROOT\"", "-DICU_DATA_DIR=\"/usr/icu\""])
        CFlags.addAll(["-DU_HAVE_NL_LANGINFO_CODESET=0", "-D_REENTRANT", "-DU_COMMON_IMPLEMENTATION", "-DU_DISABLE_RENAMING", "-DU_I18N_IMPLEMENTATION", "-DU_STATIC_IMPLEMENTATION"])
        cppFlags.addAll(["-DICU_DATA_DIR_PREFIX_ENV_VAR=\"ANDROID_ROOT\"", "-DICU_DATA_DIR=\"/usr/icu\""])
        cppFlags.addAll(["-DU_HAVE_NL_LANGINFO_CODESET=0", "-D_REENTRANT", "-DU_COMMON_IMPLEMENTATION", "-DU_DISABLE_RENAMING", "-DU_I18N_IMPLEMENTATION", "-DU_STATIC_IMPLEMENTATION"])
        CFlags.addAll(["-DBOOST_LOCALE_NO_POSIX_BACKEND", "-DBOOST_LOCALE_NO_WINAPI_BACKEND", "-DBOOST_LOCALE_WITH_ICU", "-DUSE_DL_PREFIX"])
        cppFlags.addAll(["-DBOOST_LOCALE_NO_POSIX_BACKEND", "-DBOOST_LOCALE_NO_WINAPI_BACKEND", "-DBOOST_LOCALE_WITH_ICU", "-DUSE_DL_PREFIX"])
        // physfs
        CFlags.addAll(["-DPHYSFS_SUPPORTS_ISO9660"])
        // openapoc
        cppFlags.addAll(["-DOPENAPOC_GLES", "-DRENDERERS=\"GLES_3_0:GLES_2_0\"",
                         "-DBROKEN_THREAD_LOCAL"])
        // misc c++ flags
        cppFlags.add("-std=c++11")
        cppFlags.add("-frtti")
        cppFlags.add("-fexceptions")

        //CFlags.addAll(["-fsanitize=address", "-fno-omit-frame-pointer"])
        //cppFlags.addAll(["-fsanitize=address", "-fno-omit-frame-pointer"])
        //ldFlags.add("-fsanitize=address")

        ldLibs.addAll(["log", "EGL", "GLESv1_CM", "GLESv2", "GLESv3", "OpenSLES", "android", "m"])

    }

    android.sources {
        main {
            jni {
                source {

                    srcDir 'src/main/jni'
                    // sdl2-deps excludes
                    exclude '**/dependencies/SDL2/**'
                    // sdl2 excludes
                    exclude '**/SDL/test/**'
                    exclude '**/SDL/visualtest/**'
                    // sdl-image excludes
                    exclude '**/SDL_image/showimage.c'
                    exclude '**/SDL_image/external/jpeg-9/**'
                    exclude '**/SDL_image/external/libpng-1.6.2/**'
                    exclude '**/SDL_image/external/libwebp-0.3.0/**'
                    exclude '**/SDL_image/external/tiff-4.0.3/**'
                    exclude '**/SDL_image/external/zlib-1.2.8/**'
                    // sdl-mixer excludes
                    exclude '**/SDL_mixer/external/**'
                    exclude '**/SDL_mixer/native_midi/**'
                    exclude '**/SDL_mixer/timidity/**'
                    exclude '**/SDL_mixer/playmus.c'
                    exclude '**/SDL_mixer/playwave.c'
                    // icu55 excludes
                    exclude '**/icu55/as_is/**'
                    exclude '**/icu55/source/allinone/**'
                    exclude '**/icu55/source/config/**'
                    exclude '**/icu55/source/data/**'
                    exclude '**/icu55/source/extra/**'
                    exclude '**/icu55/source/io/**'
                    exclude '**/icu55/source/layout/**'
                    exclude '**/icu55/source/layoutex/**'
                    exclude '**/icu55/source/samples/**'
                    exclude '**/icu55/source/test/**'
                    exclude '**/icu55/source/tools/**'
                    // boost_libs excludes
                    exclude '**/boost_libs/**/bind/**'
                    exclude '**/boost_libs/**/build/**'
                    exclude '**/boost_libs/**/bench/**'
                    exclude '**/boost_libs/**/benchmark/**'
                    exclude '**/boost_libs/**/concept_check/**'
                    exclude '**/boost_libs/**/config/**'
                    exclude '**/boost_libs/**/doc/**'
                    exclude '**/boost_libs/**/example/**'
                    exclude '**/boost_libs/**/examples/**'
                    exclude '**/boost_libs/**/perf/**'
                    exclude '**/boost_libs/**/performance/**'
                    exclude '**/boost_libs/**/test/**'
                    exclude '**/boost_libs/**/tools/**'
                    exclude '**/boost_libs/**/tutorial/**'
                    exclude '**/boost_libs/**/static_assert/**'
                    exclude '**/boost_libs/**/stopwatches/**'
                    exclude '**/boost_libs/**/utility/**'
                    exclude '**/boost_libs/**/win32/**'
                    //exclude '**/boost_libs/locale/src/icu/**'
                    exclude '**/boost_libs/locale/src/posix/**'
                    exclude '**/boost_libs/locale/src/win32/**'
                    exclude '**/boost_libs/tokenizer/**'
                    exclude '**/boost_libs/math/src/**'
                    exclude '**/boost_libs/math/dot_net_example/**'
                    exclude '**/boost_libs/math/minimax/**'
                    exclude '**/boost_libs/math/reporting/**'
                    exclude '**/boost_libs/mpl/preprocessed/**'
                    exclude '**/boost_libs/container/src/**'
                    exclude '**/boost_libs/thread/src/pthread/once.cpp'
                    exclude '**/boost_libs/**/reporting/**'
                    // physfs excludes
                    exclude '**/physfs/extras/**'
                    exclude '**/physfs/src/lzma/**'
                    exclude '**/physfs/test/**'
                    exclude '**/physfs/src/platform_windows.c'
                    exclude '**/physfs/src/platform_beos.cpp'
                    // tinyxml2 excludes
                    exclude '**/tinyxml2/contrib/**'
                    exclude '**/tinyxml2/xmltest.cpp'
                    // glm excludes
                    exclude '**/glm/test/**'
                    exclude '**/glm/detail/dummy.cpp'
                    // OpenApoc excludes
                    exclude '**/OpenApoc/tests/**'
                    exclude '**/OpenApoc/framework/render/gl20/**'
                    exclude '**/OpenApoc/framework/render/gl30/**'
                }
            }
        }
    }

    android.buildTypes {
        release {
            minifyEnabled = false
            if (signing.enabled) {
                signingConfig = signingConf
            }
        }
    }

    if (signing.enabled) {
        android.signingConfigs {
            create("release") {
                storeFile = file(signing.storeFilePath)
                storePassword = signing.storePassword
                keyAlias = signing.keyAlias
                keyPassword = signing.keyPassword
                signingConf = it
            }
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    testCompile 'junit:junit:4.12'
    compile 'com.android.support:appcompat-v7:22.2.1'
    compile 'com.android.support:support-v4:22.2.1'
    compile project(':aFileDialog')
}
