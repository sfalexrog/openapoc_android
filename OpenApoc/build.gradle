apply plugin: 'com.android.model.application'

if (System.properties['os.name'].toLowerCase().contains('windows')) {
    ext.ndkBin = 'ndk-build.cmd'
} else {
    ext.ndkBin = 'ndk-build'
}

Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())
def ndkDir = properties.getProperty('ndk.dir')
/*
task buildNative(type: Exec, description: 'Compile JNI source via NDK') {
    commandLine "$ndkDir/$ndkBin", "-C", file('src/main/jni').absolutePath,
            '-j' + Runtime.runtime.availableProcessors(),
            'all'
}

task cleanNative(type: Exec, description: 'Clean JNI object files') {
    commandLine "$ndkDir/$ndkBin", '-C', file('src/main/jni').absolutePath,
            'clean'
}

tasks.withType(JavaCompile) {
    compileTask -> compileTask.dependsOn buildNative
}

clean.dependsOn 'cleanNative'
*/

model {
    android {
        compileSdkVersion = 22
        buildToolsVersion = "22.0.1"

        defaultConfig.with {
            applicationId = "org.sfalexrog.openapoc"
            minSdkVersion.apiLevel = 15
            targetSdkVersion.apiLevel = 22
            versionCode = 1
            versionName = "1.0"
        }

    }

    android.lintOptions {
        abortOnError = false
    }

    android.ndk {
        moduleName = "openapoc"
        toolchain = "gcc"
        stl = 'gnustl_shared'
        // x86 and armv7
        abiFilters.add("armeabi-v7a")
        abiFilters.add("x86")
        // allegro libraries
        CFlags.add("-I${file("src/main/jni/allegro-mkfiles/include")}".toString())
        CFlags.add("-I${file("src/main/jni/al_5_1_12/include")}".toString())
        CFlags.add("-I${file("src/main/jni/al_5_1_12/addons/primitives")}".toString())
        CFlags.add("-I${file("src/main/jni/al_5_1_12/addons/image")}".toString())
        CFlags.add("-I${file("src/main/jni/al_5_1_12/addons/font")}".toString())
        CFlags.add("-I${file("src/main/jni/al_5_1_12/addons/audio")}".toString())
        CFlags.add("-I${file("src/main/jni/al_5_1_12/addons/acodec")}".toString())
        CFlags.add("-I${file("src/main/jni/al_5_1_12/addons/memfile")}".toString())
        CFlags.add("-I${file("src/main/jni/al_5_1_12/addons/color")}".toString())
        CFlags.add("-I${file("src/main/jni/al_5_1_12/addons/main")}".toString())
        CFlags.add("-I${file("src/main/jni/al_5_1_12/addons/physfs")}".toString())
        // physfs includes
        CFlags.add("-I${file("src/main/jni/OpenApoc/dependencies/physfs/src")}".toString())
        // icu55 includes
        CFlags.add("-I${file("src/main/jni/OpenApoc/dependencies/icu55/source/common")}".toString())
        // tinyxml includes
        CFlags.add("-I${file("src/main/jni/OpenApoc/dependencies/tinyxml2")}".toString())
        // glm includes
        CFlags.add("-I${file("src/main/jni/OpenApoc/dependencies/glm")}".toString())
        // openapoc includes
        CFlags.add("-I${file("src/main/jni/openapoc")}".toString())
        // defines
        // allegro
        CFlags.addAll(["-DGL_GLEXT_PROTOTYPES", "-DALLEGRO_SRC", "-DALLEGRO_PRIMITIVES_SRC", "-DALLEGRO_IIO_SRC", "-DALLEGRO_FONT_SRC"])
        CFlags.addAll(["-DALLEGRO_KCM_AUDIO_SRC", "-DALLEGRO_ACODEC_SRC", "-DALLEGRO_COLOR_SRC", "-DALLEGRO_MEMFILE_SRC"])
        CFlags.addAll(["-DALLEGRO_SRC", "-DALLEGRO_LIB_BUILD", "-Dallegro_monolith_EXPORTS"])
        cppFlags.addAll(["-DGL_GLEXT_PROTOTYPES", "-DALLEGRO_SRC", "-DALLEGRO_PRIMITIVES_SRC", "-DALLEGRO_IIO_SRC", "-DALLEGRO_FONT_SRC"])
        cppFlags.addAll(["-DALLEGRO_KCM_AUDIO_SRC", "-DALLEGRO_ACODEC_SRC", "-DALLEGRO_COLOR_SRC", "-DALLEGRO_MEMFILE_SRC"])
        cppFlags.addAll(["-DALLEGRO_SRC", "-DALLEGRO_LIB_BUILD", "-Dallegro_monolith_EXPORTS"])
        // icu55
        CFlags.addAll(["-DICU_DATA_DIR_PREFIX_ENV_VAR=\"ANDROID_ROOT\"", "-DICU_DATA_DIR=\"/usr/icu\""])
        CFlags.addAll(["-DU_HAVE_NL_LANGINFO_CODESET=0", "-D_REENTRANT", "-DU_COMMON_IMPLEMENTATION"])
        cppFlags.addAll(["-DICU_DATA_DIR_PREFIX_ENV_VAR=\"ANDROID_ROOT\"", "-DICU_DATA_DIR=\"/usr/icu\""])
        cppFlags.addAll(["-DU_HAVE_NL_LANGINFO_CODESET=0", "-D_REENTRANT", "-DU_COMMON_IMPLEMENTATION"])
        // physfs
        CFlags.addAll(["-DPHYSFS_SUPPORTS_ISO9660"])
        // And now once again, for C++
        // allegro libraries
        cppFlags.add("-I${file("src/main/jni/allegro-mkfiles/include")}".toString())
        cppFlags.add("-I${file("src/main/jni/al_5_1_12/include")}".toString())
        cppFlags.add("-I${file("src/main/jni/al_5_1_12/addons/primitives")}".toString())
        cppFlags.add("-I${file("src/main/jni/al_5_1_12/addons/image")}".toString())
        cppFlags.add("-I${file("src/main/jni/al_5_1_12/addons/font")}".toString())
        cppFlags.add("-I${file("src/main/jni/al_5_1_12/addons/audio")}".toString())
        cppFlags.add("-I${file("src/main/jni/al_5_1_12/addons/acodec")}".toString())
        cppFlags.add("-I${file("src/main/jni/al_5_1_12/addons/memfile")}".toString())
        cppFlags.add("-I${file("src/main/jni/al_5_1_12/addons/color")}".toString())
        cppFlags.add("-I${file("src/main/jni/al_5_1_12/addons/main")}".toString())
        cppFlags.add("-I${file("src/main/jni/al_5_1_12/addons/physfs")}".toString())
        // physfs includes
        cppFlags.add("-I${file("src/main/jni/OpenApoc/dependencies/physfs/src")}".toString())
        // icu55 includes
        cppFlags.add("-I${file("src/main/jni/OpenApoc/dependencies/icu55/source/common")}".toString())
        // tinyxml includes
        cppFlags.add("-I${file("src/main/jni/OpenApoc/dependencies/tinyxml2")}".toString())
        // glm includes
        cppFlags.add("-I${file("src/main/jni/OpenApoc/dependencies/glm")}".toString())
        // openapoc includes
        cppFlags.add("-I${file("src/main/jni/OpenApoc")}".toString())
        cppFlags.add("-I${file("src/main/jni/openapoc-mkfiles")}".toString())
        // openapoc defines
        cppFlags.addAll(["-DOPENAPOC_GLES", "-DRENDERERS=\"GLES_3_0:GLES_2_0\"",
                        "-DBROKEN_THREAD_LOCAL"])
        cppFlags.add("-std=c++11")
        cppFlags.add("-frtti")
        cppFlags.add("-fexceptions")

        ldLibs.addAll(["log", "EGL", "GLESv1_CM", "GLESv2", "GLESv3", "OpenSLES", "android", "m"])

    }

    android.sources {
        main {
            jni {
                source {

                    srcDir 'src/main/jni'
                    // allegro excludes
                    exclude '**/docs/scripts/**'
                    exclude '**/gp2xwiz/**'
                    exclude '**/iphone/**'
                    exclude '**/linux/**'
                    exclude '**/macosx/**'
                    exclude '**/raspberrypi/**'
                    exclude '**/sdl/**'
                    exclude '**/win/**'
                    exclude '**/x/**'
                    // allegro-addons excludes
                    exclude '**/addons/audio/alsa.c'
                    exclude '**/addons/audio/dsound.cpp'
                    exclude '**/addons/audio/oss.c'
                    exclude '**/addons/audio/pulseaudio.c'
                    exclude '**/addons/audio/sdl_audio.c'
                    exclude '**/addons/audio/openal.c'
                    exclude '**/addons/acodec/ogg.c'
                    exclude '**/addons/acodec/flac.c'
                    exclude '**/addons/acodec/modaudio.c'
                    exclude '**/addons/image/png.c'
                    exclude '**/addons/image/jpg.c'
                    exclude '**/native_dialog/**'
                    exclude '**/image/gdiplus.cpp'
                    exclude '**/addons/primitives/directx_shaders.cpp'
                    exclude '**/addons/primitives/nshader.cpp'
                    exclude '**/ttf/**'
                    exclude '**/video/**'
                    exclude '**/demos/**'
                    exclude '**/examples/*.c*'
                    exclude '**/misc/askq.c'
                    exclude '**/misc/msvchelp.c'
                    exclude '**/misc/vcvars.c'
                    exclude '**/tests/**'
                    exclude '**/tools/**'
                    exclude '**/unix/udrvlist.c'
                    exclude '**/android/example/**'
                    // allegro-deps excludes
                    exclude '**/dependencies/allegro/**'
                    // icu55 excludes
                    exclude '**/icu55/as_is/**'
                    exclude '**/icu55/source/allinone/**'
                    exclude '**/icu55/source/config/**'
                    exclude '**/icu55/source/data/**'
                    exclude '**/icu55/source/extra/**'
                    exclude '**/icu55/source/i18n/**'
                    exclude '**/icu55/source/io/**'
                    exclude '**/icu55/source/layout/**'
                    exclude '**/icu55/source/layoutex/**'
                    exclude '**/icu55/source/samples/**'
                    exclude '**/icu55/source/test/**'
                    exclude '**/icu55/source/tools/**'
                    // physfs excludes
                    exclude '**/physfs/extras/**'
                    exclude '**/physfs/src/lzma/**'
                    exclude '**/physfs/test/**'
                    exclude '**/physfs/src/platform_windows.c'
                    exclude '**/physfs/src/platform_beos.cpp'
                    // tinyxml2 excludes
                    exclude '**/tinyxml2/contrib/**'
                    exclude '**/tinyxml2/xmltest.cpp'
                    // glm excludes
                    exclude '**/glm/test/**'
                    exclude '**/glm/detail/dummy.cpp'
                    // OpenApoc excludes
                    exclude '**/OpenApoc/tests/**'
                    exclude '**/OpenApoc/framework/render/gl20/**'
                    exclude '**/OpenApoc/framework/render/gl30/**'
                }
            }
            /*
            jniLibs {
                dependencies {
                    // armeabi-v7a
                    library file('src/main/libs/armeabi-v7a/libicuuc55.so') abi "armeabi-v7a"
                    library file('src/main/libs/armeabi-v7a/libtinyxml2.so') abi "armeabi-v7a"
                    library file('src/main/libs/armeabi-v7a/libopenapoc.so') abi "armeabi-v7a"
                    library file('src/main/libs/armeabi-v7a/libphysfs.so') abi "armeabi-v7a"
                    library file('src/main/libs/armeabi-v7a/liballegro.so') abi "armeabi-v7a"
                    //library file('src/main/libs/armeabi-v7a/libc++_shared.so') abi "armeabi-v7a"
                    library file('src/main/libs/armeabi-v7a/libgnustl_shared.so') abi "armeabi-v7a"
                    // x86
                    library file('src/main/libs/x86/libicuuc55.so') abi "x86"
                    library file('src/main/libs/x86/libtinyxml2.so') abi "x86"
                    library file('src/main/libs/x86/libopenapoc.so') abi "x86"
                    library file('src/main/libs/x86/libphysfs.so') abi "x86"
                    library file('src/main/libs/x86/liballegro.so') abi "x86"
                    //library file('src/main/libs/x86/libc++_shared.so') abi "x86"
                    library file('src/main/libs/x86/libgnustl_shared.so') abi "x86"
                }
            }*/
        }
    }
    android.buildTypes {
        release {
            minifyEnabled = false
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    testCompile 'junit:junit:4.12'
    compile 'com.android.support:appcompat-v7:22.2.0'
}
