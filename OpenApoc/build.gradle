import java.security.MessageDigest

def signing = [
        enabled         : false,
        storeFilePath   : '.keystore',
        storePassword   : 'password',
        keyAlias        : 'alias',
        keyPassword     : 'password'
]

apply plugin: 'com.android.model.application'

if (file('signing.properties').exists()) {
    Properties properties = new Properties()
    properties.load(file("signing.properties").newDataInputStream())
    signing.enabled = properties.getProperty("signing.enabled")
    signing.storeFilePath = properties.getProperty("signing.storeFilePath")
    signing.storePassword = properties.getProperty("signing.storePassword")
    signing.keyAlias = properties.getProperty("signing.keyAlias")
    signing.keyPassword = properties.getProperty("signing.keyPassword")
    println("Signing configuration loaded")
}

def buildAbisEnv = System.getenv()['BUILD_ARCH_LIST']

def buildAbis = new ArrayList<String>()

if (!buildAbisEnv) {
    buildAbis.addAll(['mips', 'armeabi-v7a','x86', 'x86_64', 'arm64-v8a', 'mips64'])
} else {
    buildAbis.addAll(buildAbisEnv.split(" "))
}

def getFolder(res) {
    return file("src/main/jni/OpenApoc/${res}")
}

tasks.withType(Zip) {
    zTask -> zTask.doLast {
        MessageDigest digest = MessageDigest.getInstance("MD5")
        digest.update(file(zTask.archivePath).bytes)
        def checksum = new BigInteger(1, digest.digest()).toString(16).padLeft(32, "0")
        new File(zTask.archivePath.toString() + ".md5").text = checksum
    }
}

task packData(description: 'Update data files.') {
    ['data'].each { String res ->
        def zip = task("zip" + res, type: Zip)
        zip.doFirst { println("Packing ${res}...")}
        zip.destinationDir = file('src/main/assets')
        zip.archiveName = "${res}.zip"
        zip.from getFolder(res)
        zip.into res
        zip.execute()
    }
}

build.dependsOn packData

model {

    def signingConf

    android {
        compileSdkVersion = 22
        buildToolsVersion = "22.0.1"

        defaultConfig.with {
            applicationId = "org.sfalexrog.openapoc"
            minSdkVersion.apiLevel = 15
            targetSdkVersion.apiLevel = 22
            versionCode = 1
            versionName = "1.0"
        }
    }

    android.lintOptions {
        abortOnError = false
    }

    android.ndk {
        moduleName = "openapoc"
        toolchain = "gcc"
        stl = 'c++_shared'
        abiFilters.addAll(buildAbis)
        // sdl includes
        CFlags.add("-I${file("src/main/jni/SDL/include")}".toString())
        cppFlags.add("-I${file("src/main/jni/SDL/include")}".toString())
        // sdl-image includes
        CFlags.add("-I${file("src/main/jni/SDL_image")}".toString())
        cppFlags.add("-I${file("src/main/jni/SDL_image")}".toString())
        // physfs includes
        CFlags.add("-I${file("src/main/jni/OpenApoc/dependencies/physfs/src")}".toString())
        cppFlags.add("-I${file("src/main/jni/OpenApoc/dependencies/physfs/src")}".toString())
        // icu55 includes
        CFlags.add("-I${file("src/main/jni/OpenApoc/dependencies/icu55/source/common")}".toString())
        cppFlags.add("-I${file("src/main/jni/OpenApoc/dependencies/icu55/source/common")}".toString())
        // tinyxml includes
        CFlags.add("-I${file("src/main/jni/OpenApoc/dependencies/tinyxml2")}".toString())
        cppFlags.add("-I${file("src/main/jni/OpenApoc/dependencies/tinyxml2")}".toString())
        // glm includes
        CFlags.add("-I${file("src/main/jni/OpenApoc/dependencies/glm")}".toString())
        cppFlags.add("-I${file("src/main/jni/OpenApoc/dependencies/glm")}".toString())
        // openapoc includes
        CFlags.add("-I${file("src/main/jni/OpenApoc")}".toString())
        CFlags.add("-I${file("src/main/jni/openapoc-mkfiles")}".toString())
        cppFlags.add("-I${file("src/main/jni/OpenApoc")}".toString())
        cppFlags.add("-I${file("src/main/jni/openapoc-mkfiles")}".toString())
        // defines
        // sdl
        CFlags.add("-DGL_GLEXT_PROTOTYPES")
        cppFlags.add("-DGL_GLEXT_PROTOTYPES")
        // sdl-image
        CFlags.addAll(["-DLOAD_BMP", "-DLOAD_GIF", "-DLOAD_LBM", "-DLOAD_PCX", "-DLOAD_PNM", "-DLOAD_TGA", "-DLOAD_XCF", "-DLOAD_XPM", "-DLOAD_XV"])
        cppFlags.addAll(["-DLOAD_BMP", "-DLOAD_GIF", "-DLOAD_LBM", "-DLOAD_PCX", "-DLOAD_PNM", "-DLOAD_TGA", "-DLOAD_XCF", "-DLOAD_XPM", "-DLOAD_XV"])
        // icu55
        CFlags.addAll(["-DICU_DATA_DIR_PREFIX_ENV_VAR=\"ANDROID_ROOT\"", "-DICU_DATA_DIR=\"/usr/icu\""])
        CFlags.addAll(["-DU_HAVE_NL_LANGINFO_CODESET=0", "-D_REENTRANT", "-DU_COMMON_IMPLEMENTATION"])
        cppFlags.addAll(["-DICU_DATA_DIR_PREFIX_ENV_VAR=\"ANDROID_ROOT\"", "-DICU_DATA_DIR=\"/usr/icu\""])
        cppFlags.addAll(["-DU_HAVE_NL_LANGINFO_CODESET=0", "-D_REENTRANT", "-DU_COMMON_IMPLEMENTATION"])
        // physfs
        CFlags.addAll(["-DPHYSFS_SUPPORTS_ISO9660"])
        // openapoc
        cppFlags.addAll(["-DOPENAPOC_GLES", "-DRENDERERS=\"GLES_3_0:GLES_2_0\"",
                        "-DBROKEN_THREAD_LOCAL"])
        // misc c++ flags
        cppFlags.add("-std=c++11")
        cppFlags.add("-frtti")
        cppFlags.add("-fexceptions")

        ldLibs.addAll(["log", "EGL", "GLESv1_CM", "GLESv2", "GLESv3", "OpenSLES", "android", "m"])

    }

    android.sources {
        main {
            jni {
                source {

                    srcDir 'src/main/jni'
                    // allegro excludes
                    exclude '**/al_5_1_12/**'
                    // allegro-deps excludes
                    exclude '**/dependencies/allegro/**'
                    // sdl2 excludes
                    exclude '**/SDL/test/**'
                    exclude '**/SDL/visualtest/**'
                    // sdl-image excludes
                    exclude '**/SDL_image/showimage.c'
                    exclude '**/SDL_image/external/jpeg-9/**'
                    exclude '**/SDL_image/external/libpng-1.6.2/**'
                    exclude '**/SDL_image/external/libwebp-0.3.0/**'
                    exclude '**/SDL_image/external/tiff-4.0.3/**'
                    exclude '**/SDL_image/external/zlib-1.2.8/**'


                    // icu55 excludes
                    exclude '**/icu55/as_is/**'
                    exclude '**/icu55/source/allinone/**'
                    exclude '**/icu55/source/config/**'
                    exclude '**/icu55/source/data/**'
                    exclude '**/icu55/source/extra/**'
                    exclude '**/icu55/source/i18n/**'
                    exclude '**/icu55/source/io/**'
                    exclude '**/icu55/source/layout/**'
                    exclude '**/icu55/source/layoutex/**'
                    exclude '**/icu55/source/samples/**'
                    exclude '**/icu55/source/test/**'
                    exclude '**/icu55/source/tools/**'
                    // physfs excludes
                    exclude '**/physfs/extras/**'
                    exclude '**/physfs/src/lzma/**'
                    exclude '**/physfs/test/**'
                    exclude '**/physfs/src/platform_windows.c'
                    exclude '**/physfs/src/platform_beos.cpp'
                    // tinyxml2 excludes
                    exclude '**/tinyxml2/contrib/**'
                    exclude '**/tinyxml2/xmltest.cpp'
                    // glm excludes
                    exclude '**/glm/test/**'
                    exclude '**/glm/detail/dummy.cpp'
                    // OpenApoc excludes
                    exclude '**/OpenApoc/tests/**'
                    exclude '**/OpenApoc/framework/render/gl20/**'
                    exclude '**/OpenApoc/framework/render/gl30/**'
                }
            }
        }
    }

    android.buildTypes {
        release {
            minifyEnabled = false
            if (signing.enabled) {
                signingConfig = signingConf
            }
        }
    }

    if (signing.enabled) {
        android.signingConfigs {
            create("release") {
                storeFile = file(signing.storeFilePath)
                storePassword = signing.storePassword
                keyAlias = signing.keyAlias
                keyPassword = signing.keyPassword
                signingConf = it
            }
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    testCompile 'junit:junit:4.12'
    compile 'com.android.support:appcompat-v7:22.2.0'
}
